<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="tasks"/>
  
  
  <!-- ************************************************************ -->
  <!-- Client is automatically called by the scheduler and must     -->
  <!-- always define all the parameters below                       -->
  <function name="tasks">
    <function-map-args>
      <function-arg-def name="client"     type="required"/>
      <function-arg-def name="instances"  type="required"/>
      <function-arg-def name="duration"   type="required"/>
      <function-arg-def name="suffix"     type="required"/>
      <function-arg-def name="outFile"    type="required"/>
      <function-arg-def name="fileFd"     type="required"/>
    </function-map-args>
    
    <sequence>
      <!-- ===================   Comments   =================== -->
      <!-- client is run under paralleliterate tag              -->
      <!-- each variables defined are internal                  -->
      <!-- client should have its own err_num variable in order -->
      <!-- to inform scheduler if it has pass/fail status       -->
      <script>
        errNum = 0
        msg = ''
      </script>
      
      <!-- ==================    Parser     =================== -->
      <!-- parse the client parameters :                        -->
      <!-- params is [[param1,val1],[param2,val2],...]          -->
      <!-- get the ldap instance parameters                     -->
      <import machine="'%s' % (client.getHost())"
              file="'%s/%sLib.xml' % (client.getPath(),client.getName())"/>
      <call function="'%sParser' % client.getName()">
      {
        'client'     : client,
        'instances'  : instances,
        'duration'   : duration,
        'suffix'     : suffix
      }
      </call>
      
      <if expr="msg.find('ERROR') != -1">
        <sequence>
          <message>'%s' % msg</message>
          <call function="'writeOperationResult'">
            {
              'returncode' : '1',
              'expected'   : '0',
              'result'     : msg,
              'status'     : 'ERROR',
              'fileFd'     : fileFd
            }
          </call>
          <script>
            errNum += 1
          </script>
        </sequence>
      <else>
        <sequence>
          <!-- ========== Run the client ========== -->
          <call function="'writeStartTagOperation'">
          { 'tagName' : 'run',
            'fileFd'  : fileFd }
          </call>
         
          <script>
            cpt=0
            intdelaySec= int(delaySec)
            intdelayMilliSec = intdelaySec * 1000
            intnbTasks= int(nbTasks)
            allowednbTasks= duration / intdelaySec
            listBackupFolder = []
          </script>
          
          <call function="'writeMessage'">
            {'content' : 'Execute %s tasks every %s sec ' % (allowednbTasks,intdelaySec),
            'fileFd'  : fileFd}
          </call>

          <call function="'writeEndTagOperation'">{'fileFd'  : fileFd}</call>

          <loop from="1" to="allowednbTasks" >
            <sequence>
              <call function="'writeStartTagOperation'">
                { 'tagName' : 'Execute a backup task',
                'fileFd'  : fileFd }
              </call>              
              <call function="'backup'">
                { 'location'      : serverInstance.getHost(),
                'dsPath'          : serverInstance.getInstallDir(),
                'dsInstanceHost'  : serverInstance.getHost(),
                'dsInstancePort'  : serverInstance.getLDAPPort(),
                'dsInstanceDn'    : DIRECTORY_INSTANCE_DN,
                'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD,
                'startTask'       : '0',
                'backupDir'       :  '%s/backup_schedule_asynchronous_%s' % (serverInstance.getInstallDir(),cpt),
                'backEnd'         : 'userRoot',
                'fileFd'          : fileFd}
              </call>

                   
              <script>
                BackupFolder = '%s/backup_schedule_asynchronous_%s' % (serverInstance.getInstallDir(),cpt)
                listBackupFolder.append(BackupFolder)
              </script>
              
              <!--=== Sleep and wait to start the client when specified ===-->
              <call function="'sleep'">
                { 'location' : serverInstance.getHost(),
                'sleepForMilliSeconds' : intdelayMilliSec,
                'fileFd'   : fileFd
                }
              </call>

              <script>cpt += 1</script>
              <call function="'writeEndTagOperation'">{'fileFd'  : fileFd}</call>
            </sequence>
          </loop>

        
          <iterate in="listBackupFolder" var="backupFolder">
            <sequence>
              <call function="'deleteFolder'">
                {
                'location'      : serverInstance.getHost(),
                'foldername'    :  backupFolder,
                'fileFd'        : fileFd
                }
              </call>
              <script>
                errNum += STAXResult
              </script>
            </sequence>
          </iterate>
         
          <call function="'writeStartTagOperation'">
            { 'tagName' : 'End Backup task',
            'fileFd'  : fileFd }
          </call>
          <!-- ========== Postamble ========== -->
          <call function="'writeMessage'">
          {'content' : 'Output file %s' % outFile,
           'fileFd'  : fileFd}
          </call>
          
          <call function="'writeEndTagOperation'">{'fileFd'  : fileFd}</call>
       
          
        </sequence>
      </else>
      </if>
      
      <return> errNum </return>
      
    </sequence>
    
  </function>
  
  
</stax>

