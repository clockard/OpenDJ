<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
! -->
<stax>
  
  <defaultcall function="preConfiguration"/>
  
  <function name="preConfiguration" scope="local">
    <function-map-args>
      <function-arg-def name="phase" type="required">
        <function-arg-description>
          phase object
        </function-arg-description>
      </function-arg-def>      
      <function-arg-def name="instances" type="required">
        <function-arg-description>
          list of instances classes
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="suffix" type="required">
        <function-arg-description>
          suffix class
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="scheduler" type="required">
        <function-arg-description>
          suffix class
        </function-arg-description>
      </function-arg-def>      
    </function-map-args>
    
    <sequence>

    <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
		file="'%s/opendscfg.xml' % (SHARED_FUNC_DIR)"/>
      
      <!-- ================= Call preambule ======================== -->
      <call function="'phasePreamble'">
 	{ 'phase'	 : phase,
        'fileFd'    : LOG_MAIN_FD }
      </call>
      
     
      <!-- ================= Display instance names ================ -->
      <iterate in="instances" var="instance">
        <sequence>
          <!-- == Write tag for xml report -->
          <call function="'writeStartTagInstance'">
            {
            'instance' : instance,
            'fileFd'   : LOG_MAIN_FD 
            }
          </call>
          
          <call function="'writeMessage'">
            { 
            'fileFd'  : LOG_MAIN_FD,
            'content' : 'my instance is : %s' % instance.getName()
            }
          </call>
          
          <!--==================  Import schema extension ldif file  =======================-->
          <message>'debug copy %s/scenario/%s/data/99_ext_schema.ldif' % (LOCAL_TESTS_DIR,DIR_NAME)</message>
          <call function="'writeMessage'">
            { 
            'fileFd'  : LOG_MAIN_FD,
            'content' : '%s/scenario/%s/data' % (LOCAL_TESTS_DIR,DIR_NAME)
            }
          </call>

          <call function="'copyFile'">
          {
            'srcFile'    : '%s/scenario/%s/data/99_ext_schema.ldif' % (LOCAL_TESTS_DIR,DIR_NAME),
            'destFile'   : '%s/config/schema/99_ext_schema.ldif' % instance.getInstallDir(),
            'remoteHost' : '%s' % instance.getHost(),
            'fileFd'     : LOG_MAIN_FD
          }
          </call>
          
           <message>'debug to %s/config/schema/99_ext_schema.ldif' % instance.getInstallDir()</message>
          <call function="'StartDsWithScript'">
            { 'location'	: instance.getHost(),
            'dsPath'	: instance.getInstallDir(),
            'instance'  : instance,
            'fileFd'	  : LOG_MAIN_FD
            }
          </call>

          <call function="'dsconfig'">
          { 'location'   : instance.getHost(),
          'dsPath'       : instance.getInstallDir(),
          'dsInstanceHost'  : instance.getHost(),
          'dsInstancePort'  : instance.getLDAPPort(),
          'dsInstanceDn'    : DIRECTORY_INSTANCE_DN ,
          'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD ,
          'subcommand'     : 'create-local-db-index',
          'objectType'     : 'backend-name',
          'objectName'     : 'userRoot',
          'optionsString'  : '--index-name mailEXT --set index-type:equality --set index-type:substring',
          'expectedRC'     : 0,
          'fileFd'         : LOG_MAIN_FD
          }
          </call>

          <call function="'dsconfig'">
          { 'location'   : instance.getHost(),
          'dsPath'       : instance.getInstallDir(),
          'dsInstanceHost'  : instance.getHost(),
          'dsInstancePort'  : instance.getLDAPPort(),
          'dsInstanceDn'    : DIRECTORY_INSTANCE_DN ,
          'dsInstancePswd'  : DIRECTORY_INSTANCE_PSWD ,
          'subcommand'     : 'create-local-db-index',
          'objectType'     : 'backend-name',
          'objectName'     : 'userRoot',
          'optionsString'  : '--index-name descriptionEXT --set index-type:equality --set index-type:substring',
          'expectedRC'     : 0,
          'fileFd'         : LOG_MAIN_FD
          }
          </call>          
          
          <call function="'StopDsWithScript'">
	  {
            'location'	: instance.getHost(),
            'dsPath'	: instance.getInstallDir(),
            'expectedRC': 0,
            'dsRestart' : ' ',
            'fileFd'	: LOG_MAIN_FD
	  }
          </call>
          
          <call function="'StopDsWithScript'">
	  {
            'location'	: instance.getHost(),
            'dsPath'	: instance.getInstallDir(),
            'expectedRC': 0,
            'fileFd'	: LOG_MAIN_FD
	  }
          </call>
          
          <!-- == Write tag for xml report -->
          <call function="'writeEndTagInstance'">
            { 'fileFd'    : LOG_MAIN_FD }
          </call>
          
        </sequence>
      </iterate>
      
      
      <!-- ================= Call postambule ======================= -->
      <call function="'phasePostamble'">
	{ 'phase'	 : phase,
        'fileFd'    : LOG_MAIN_FD
        }
      </call>
      
    </sequence>
  </function>
  
</stax>
