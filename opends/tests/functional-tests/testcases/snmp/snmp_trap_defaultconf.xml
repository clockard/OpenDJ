<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="snmp_trap_defaultconf"/>

  <function name="snmp_trap_defaultconf">

    <sequence>

      <block name="'snmp_trap_defaultconf'">

        <sequence>

          <!--- Test Suite information
            #@TestSuiteName       SNMP trap with default configuration
            #@TestSuitePurpose    Check SNMP trap with default configuration.
            #@TestSuiteGroup      SNMP trap with default configuration
            #@TestScript          snmp_trap_defaultconf.xml
          -->
          <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group'] = 'snmp'
            CurrentTestPath['suite'] = STAXCurrentBlock
          </script>

          <call function="'testSuite_Preamble'"/>

          <!--- Test Case information
            #@TestMarker          SNMP trap with default configuration
            #@TestName            snmp_trap_defaultconf: trap on stop-ds
            #@TestIssue           3241
            #@TestPurpose         Check that a trap is sent on OpenDS trap
                                  community after stop-ds command.
            #@TestPreamble        none
            #@TestStep            Run the trap listener, it send an event to
                                  notify that it is ready.
            #@TestStep            When this event is received, stop-ds command
                                  is executed and a another event is sent to
                                  notify that the command is completed.
            #@TestStep            The trap listener catches this event and send
                                  a result.
            #@TestPostamble       none
            #@TestResult          Success if SNMPTrapListener returns 0.
          -->
          <testcase name="getTestCaseName
          ('snmp_trap_defaultconf: trap on stop-ds')">

            <sequence>

              <parallel>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: run the trap listener'
                  </message>

                  <call function="'SNMPTrapListener'">
                    {
                    'snmpHost'          : DIRECTORY_INSTANCE_HOST ,
                    'snmpTrapPort'      : SNMP_TRAP_PORT ,
                    'snmpTrapCommunity' : 'OpenDS' ,
                    'snmpTrapNumber'    : '1,0,0,0,0,0'
                    }
                  </call>
                </sequence>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: wait event from the trap listener'
                  </message>

                  <call function="'WaitEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: delete event from the trap listener'
                  </message>
                  <call function="'DeleteEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: stop the server'
                  </message>
                  <call function="'StopDsWithScript'">
                    { 'location' : STAF_REMOTE_HOSTNAME }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: send event to the trap listener'
                  </message>

                  <call function="'SendEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SendTrap/Complete'
                    }
                  </call>
                </sequence>
              </parallel>

              <script>
                knownIssue(3241)
              </script>

              <call function="'testCase_Postamble'"/>

            </sequence>

          </testcase>

          <!--- Test Case information
            #@TestMarker          SNMP trap with default configuration
            #@TestName            snmp_trap_defaultconf: trap on start-ds
            #@TestIssue           3241
            #@TestPurpose         Check that a trap is sent on OpenDS trap
                                  community after start-ds command.
            #@TestPreamble        none
            #@TestStep            Run the trap listener, it send an event to
                                  notify that it is ready.
            #@TestStep            When this event is received, start-ds command
                                  is executed and a another event is sent to
                                  notify that the command is completed.
            #@TestStep            The trap listener catches this event and send
                                  a result.
            #@TestPostamble       none
            #@TestResult          Success if SNMPTrapListener returns 0.
          -->
          <testcase name="getTestCaseName
          ('snmp_trap_defaultconf: trap on start-ds')">

            <sequence>

              <parallel>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: run the trap listener'
                  </message>

                  <call function="'SNMPTrapListener'">
                    {
                    'snmpHost'          : DIRECTORY_INSTANCE_HOST ,
                    'snmpTrapPort'      : SNMP_TRAP_PORT ,
                    'snmpTrapCommunity' : 'OpenDS' ,
                    'snmpTrapNumber'    : '1,0,0,0,0,0'
                    }
                  </call>
                </sequence>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: wait event from the trap listener'
                  </message>

                  <call function="'WaitEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: delete event from the trap listener'
                  </message>
                  <call function="'DeleteEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: start the server'
                  </message>
                  <call function="'StartDsWithScript'">
                    { 'location' : STAF_REMOTE_HOSTNAME }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: send event to the trap listener'
                  </message>

                  <call function="'SendEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SendTrap/Complete'
                    }
                  </call>
                </sequence>
              </parallel>

              <script>
                knownIssue(3241)
              </script>

              <call function="'testCase_Postamble'"/>

            </sequence>

          </testcase>

          <!--- Test Case information
            #@TestMarker          SNMP trap with default configuration
            #@TestName            snmp_trap_defaultconf: trap on stop-ds -R
            #@TestIssue           3241
            #@TestPurpose         Check that 2 traps are sent on OpenDS trap
                                  community after stop-ds -R command.
            #@TestPreamble        none
            #@TestStep            Run the trap listener, it send an event to
                                  notify that it is ready.
            #@TestStep            When this event is received, stop-ds -R
                                  command is executed and a another event is
                                  sent to notify that the command is completed.
            #@TestStep            The trap listener catches this event and send
                                  a result.
            #@TestPostamble       none
            #@TestResult          Success if SNMPTrapListener returns 0.
          -->
          <testcase name="getTestCaseName
          ('snmp_trap_defaultconf: trap on stop-ds -R')">

            <sequence>

              <parallel>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: run the trap listener'
                  </message>

                  <call function="'SNMPTrapListener'">
                    {
                    'snmpHost'          : DIRECTORY_INSTANCE_HOST ,
                    'snmpTrapPort'      : SNMP_TRAP_PORT ,
                    'snmpTrapCommunity' : 'OpenDS' ,
                    'snmpTrapNumber'    : '2,0,0,0,0,0'
                    }
                  </call>
                </sequence>
                <sequence>
                  <message>
                    'snmp_trap_defaultconf: wait event from the trap listener'
                  </message>

                  <call function="'WaitEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: delete event from the trap listener'
                  </message>
                  <call function="'DeleteEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SNMPTrapLister/Ready'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: restart the server'
                  </message>
                  <call function="'StopDsWithScript'">
                    {
                    'location'  : STAF_REMOTE_HOSTNAME ,
                    'dsRestart' : 'True'
                    }
                  </call>

                  <message>
                    'snmp_trap_defaultconf: send event to the trap listener'
                  </message>

                  <call function="'SendEvent'">
                    {
                    'location' : STAF_REMOTE_HOSTNAME ,
                    'name'     : 'SendTrap/Complete'
                    }
                  </call>
                </sequence>
              </parallel>

              <script>
                knownIssue(3241)
              </script>

              <call function="'testCase_Postamble'"/>

            </sequence>

          </testcase>

          <call function="'testSuite_Postamble'"/>

        </sequence>

      </block>

    </sequence>

  </function>

</stax>
