<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="main_setup"/>

  <function name="main_setup">

    <sequence>

      <block name="'setup'">
      
        <sequence>
    
          <!-- Locally delete any existing files from staging area -->
          <message>'Delete the temporary staging area'</message>
          <call function="'deleteFolder'">
            { 'location'   :  STAXServiceMachine,
              'foldername' : '%s' % TMP_DATA_DIR }
          </call>
    
          <!-- Locally delete any existing files from the zip archive -->
          <message>'Delete existing zip archive.'</message>
          <call function="'deleteFile'">
              { 'location' : STAXServiceMachine,
                'filename' : '%s/ldifdata.zip' % TMPDIR }
          </call>
    
          <!--- Delete folder if it exists on remote host-->
          <message>
            'Delete folder %s/%s' % (DIRECTORY_INSTANCE_DIR,OPENDSNAME)
          </message>
          <call function="'deleteFolder'">
            { 'location'   :  STAF_REMOTE_HOSTNAME,
              'foldername' : '%s/%s' % (DIRECTORY_INSTANCE_DIR,OPENDSNAME),
               }
          </call>
          
          <!-- Locally copy static data files to temporary staging area -->
          <!-- LDIF (.ldif) files -->
          <message>'Copy ldif data files'</message>
          <call function="'CopyFolderByExtension'">
              { 'location'   : STAXServiceMachine,
                'srcfolder'  : TESTS_DIR,
                'destfolder' : TMP_DATA_DIR,
                'extension'  : 'ldif' }
          </call>
    
          <!-- PWD (.pwd) files -->
          <call function="'CopyFolderByExtension'">
              { 'location'   : STAXServiceMachine,
                'srcfolder'  : TESTS_DIR,
                'destfolder' : TMP_DATA_DIR,
                'extension'  : 'pwd' }
          </call>
    
          <!-- Archive (.gz) files -->
          <message>'Copy gz data files'</message>
          <call function="'CopyFolderByExtension'">
              { 'location'   : STAXServiceMachine,
                'srcfolder'  : TESTS_DIR,
                'destfolder' : TMP_DATA_DIR,
                'extension'  : 'gz' }
          </call>
    
          <!-- Dynamically create ldif files for staging -->
          <!-- Modify SSL port to a user-defined value -->
          <script>
            write_ldaps_ldif_file('%s/shared/data' % (TMP_DATA_DIR), '%s' % (DIRECTORY_INSTANCE_SSL_PORT));
          </script>
        
          <!--  Zip up contents of tests directory -->
          <message>
              'Zip up data directory.'
          </message>
          <call function="'zipUpFile'">
            { 'location'   : STAXServiceMachine,
              'zipfile'    : '%s/ldifdata.zip' % TMPDIR , 
              'folder'     : TMP_DATA_DIR ,
              'relativeto' : TMPDIR }
          </call>
    
          <!---  Copy staging data to remote host -->
          <message>
            'Copy tests to %s on %s' % (DIRECTORY_INSTANCE_DIR,STAF_REMOTE_HOSTNAME)
          </message>
          <call function="'copyFile'">
            { 'location'   : STAXServiceMachine,
              'srcfile'    : '%s/ldifdata.zip' % TMPDIR,
              'destfile'   : '%s/ldifdata.zip' % DIRECTORY_INSTANCE_DIR,
              'remotehost' : STAF_REMOTE_HOSTNAME }
          </call>
    
          <!---   Unzip contents of staging data on remote host -->
          <message>
            'Extract contents of test data %s on %s' % (DIRECTORY_INSTANCE_DIR,STAF_REMOTE_HOSTNAME)
          </message>
          <call function="'unZipFile'">
            { 'location'   : STAF_REMOTE_HOSTNAME,
              'zipfile'    : '%s/ldifdata.zip' % DIRECTORY_INSTANCE_DIR, 
              'unzipdir'   : '%s' % DIRECTORY_INSTANCE_DIR,
               }
          </call>
    
          <!--- Install DS Copy zip file -->
          <message>
            'Copy DS zip archive to %s on %s' % (DSTFILE,STAF_REMOTE_HOSTNAME)
          </message>
          <call function="'copyFile'">
                { 'srcfile'    : SRCFILE, 
                  'destfile'   : DSTFILE,
                  'remotehost' : STAF_REMOTE_HOSTNAME }
          </call>
    
          <!--- Install DS Extract zip file -->
          <message>
            'Extract DS zip archive to %s on %s' % (DIRECTORY_INSTANCE_DIR,STAF_REMOTE_HOSTNAME)
          </message>
          <call function="'unZipFile'">
            { 'location'   : STAF_REMOTE_HOSTNAME,
              'zipfile'    : DSTFILE, 
              'unzipdir'   : '%s' % DIRECTORY_INSTANCE_DIR }
          </call>
    
          <!--- Configure DS -->
          <sequence>
            <message>
             'Configuring DS on %s' % STAF_REMOTE_HOSTNAME
            </message>
            <call function="'ConfigureDsWithScript'">
                { 'location'  : STAF_REMOTE_HOSTNAME,
                  'dsPort'    : DIRECTORY_INSTANCE_PORT,
                  'dsBindDN'  : DIRECTORY_INSTANCE_DN,
                  'dsBindPwd' : DIRECTORY_INSTANCE_PSWD,
                  'dsBaseDN'  : DIRECTORY_INSTANCE_SFX }
            </call>
            <call function="'checkRC'">
              { 'returncode' : RC ,
                'result'     : STAXResult }
            </call>
          </sequence>
    
        </sequence>
    
      </block>
    
    </sequence>

  </function>

</stax>
