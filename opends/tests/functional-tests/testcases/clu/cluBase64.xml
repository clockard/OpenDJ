<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, exclude this CDDL HEADER in each
 ! file and exclude the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2007 Sun Microsystems, Inc.
 ! -->

<stax>

  <defaultcall function="main_cluBase64"/>

  <function name="main_cluBase64">

    <sequence>

      <block name="'cluBase64'">
      
        <sequence>
  
          <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group']='clu'              
            CurrentTestPath['suite']=STAXCurrentBlock
          </script>
      
          <call function="'testSuite_Preamble'"/>
                  
         <!--- Test Suite information
            #@TestSuiteName       Clu: Base64
            #@TestSuitePurpose    Check the base64 command with common options
            #@TestSuiteID         Clu Base64 Command
            #@TestSuiteGroup      cluBase64
            #@TestGroup           clu
            #@TestScript          cluBase64.xml
            #@TestHTMLLink        http://opends.dev.java.net/
          -->


          <import machine="STAF_LOCAL_HOSTNAME"
            file="'%s/testcases/clu/clu_setup.xml' % (TESTS_DIR)"/>

          <call function="'clu_setup'"> 
            { 'startDS'     : False,
              'loadBackend' : False } 
          </call>    
                   
          <!--- Test Case information
            #@TestMarker          Clu Base64 Tests
            #@TestName            Clu: Base64: Encode
            #@TestID              Encode
            #@TestPurpose         Verify that raw data can be base64 encoded.
            #@TestPreamble
            #@TestSteps           
            #@TestPostamble
            #@TestResult          Success if status returns 0
          -->
               
           <testcase name="getTestCaseName('Encode')">
  
            <sequence>
    
              <call function="'testCase_Preamble'"/>

              <message>
                'Clu: Base64: Encode'
              </message>

              <call function="'Base64WithScript'">
                {
                  'subcommand' : 'encode',
                  'rawData'    : 'hello world'
                }
              </call>

              <!-- STAXResult is not always a list--> 
              <script>
                try:
                  RC,Result=STAXResult[0]
                except AttributeError,details:
                  Result='AttributeError: can not parse STAXResult %s' % details
                  RC='1'                
              </script>

              <script>
                pattern=re.compile('aGVsbG8gd29ybGQ=')
              </script>

              <if expr="pattern.match(Result)">
                <sequence>
                  <message>'Base64 returns matching encoded data (%s)' % Result</message>
                  <tcstatus result="'pass'"></tcstatus>
                </sequence>
              <else>
                <sequence>
                  <message>'Base64 returns non matching data (%s)' % Result</message>
                  <tcstatus result="'fail'"></tcstatus>
                </sequence>
              </else>
              </if>                            
                            
              <call function="'testCase_Postamble'"/>
    
            </sequence>
    
           </testcase> 

          <!--- Test Case information
            #@TestMarker          Clu Base64 Tests
            #@TestName            Clu: Base64: Decode
            #@TestID              Decode
            #@TestPurpose         Verify that base64 encoded data can be decoded.
            #@TestPreamble
            #@TestSteps           
            #@TestPostamble
            #@TestResult          Success if status returns 0
          -->
               
           <testcase name="getTestCaseName('Decode')">
  
            <sequence>
    
              <call function="'testCase_Preamble'"/>

              <message>
                'Clu: Base64: Decode'
              </message>

              <call function="'Base64WithScript'">
                {
                  'subcommand'  : 'decode',
                  'encodedData' : 'aGVsbG8gd29ybGQ='
                }
              </call>

              <!-- STAXResult is not always a list-->
              <script>
                try:
                  RC,Result=STAXResult[0]
                except AttributeError,details:
                  Result='AttributeError: can not parse STAXResult %s' % details
                  RC='1'                
              </script>

              <script>
                pattern=re.compile('hello world')
              </script>

              <if expr="pattern.match(Result)">
                <sequence>
                  <message>'Base64 returns matching decoded data (%s)' % Result</message>
                  <tcstatus result="'pass'"></tcstatus>
                </sequence>
              <else>
                <sequence>
                  <message>'Base64 returns non matching data (%s)' % Result</message>
                  <tcstatus result="'fail'"></tcstatus>
                </sequence>
              </else>
              </if>
                            
              <call function="'testCase_Postamble'"/>
    
            </sequence>
    
           </testcase>
                                         
          <import machine="STAF_LOCAL_HOSTNAME"
            file="'%s/testcases/clu/clu_cleanup.xml' % (TESTS_DIR)"/>
          <call function="'clu_cleanup'">
            { 
              'stopDS' : False
            } 
          </call>

          <call function="'testSuite_Postamble'"/>
                            
        </sequence>
    
      </block>
    
    </sequence>

  </function>

</stax>
