<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, exclude this CDDL HEADER in each
 ! file and exclude the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>
  
  <defaultcall function="clu_ldifsearch_checkbehavior"/>
  
  <function name="clu_ldifsearch_checkbehavior">
    
    <sequence>
      
      <block name="'clu_ldifsearch_checkbehavior'">
        
        <sequence>
          
          <!--- Test Suite information
            #@TestSuiteName       ldifsearch check behavior tests
            #@TestSuitePurpose    Test the results of ldifsearch command.
            #@TestSuiteGroup      ldifsearch check behavior tests
            #@TestScript          clu_ldifsearch_checkbehavior.xml
          -->
          
          <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group'] = 'clu'              
            CurrentTestPath['suite'] = STAXCurrentBlock
          </script>
          
          <call function="'testSuite_Preamble'"/>
                    
          <!--- Define default value for basedn, dsfilename, filter files -->
          <script>
            basedn = 'ou=ldapsearch,o=clu tests,dc=example,dc=com'
            dsfilename = '%s/clu/clu_start.ldif' % logsRemoteDataDir
            filterfile  = '%s/clu/filters.ldif' % logsRemoteDataDir
            mfilterfile = '%s/clu/multiple_filters.ldif' % logsRemoteDataDir  
          </script>
          
          <!--- Test Case information
            #@TestMarker          ldifsearch check behavior tests
            #@TestName            ldifsearch: check with standard options
            #@TestIssue           none
            #@TestPurpose         Verify that the entries returned by ldifseach
                                  are the same than the entries returned by
                                  ldapsearch
            #@TestPreamble        none
            #@TestStep            Do an ldapsearch with standard options.
            #@TestStep            Do an ldifsearch with the same options.
            #@TestStep            Do an ldif-dif to check the differences.
            #@TestPostamble       none
            #@TestResult          Success if ldifdiff returns no differences.
          -->
          <testcase name="getTestCaseName('ldifsearch: standard options')">
            
            <sequence>
              
              <call function="'testCase_Preamble'"/>
              
              <message>
                'ldifsearch: standard options'
              </message>
              
              <call function="'ldapSearchWithScript'">
                {
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort' : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'       : basedn ,
                'dsFilter'       : 'uid=user.1*' ,
                'outputFile'     : 'ldapsearch.out' ,
                'outputPath'     : '%s' % DIRECTORY_INSTANCE_DIR
                }                
              </call>

              <call function="'ldifSearchWithScript'">
                {
                'dsLdifFile'   : dsfilename ,
                'dsBaseDN'     : basedn ,
                'dsFilter'     : 'uid=user.1*' ,
                'dsOutputFile' : '%s/ldifsearch.out' % DIRECTORY_INSTANCE_DIR
                }                
              </call>              
              
              <call function="'LdifDiffWithScript'">
                { 
                'sourceLdif' : '%s/ldifsearch.out' % DIRECTORY_INSTANCE_DIR ,
                'targetLdif' : '%s/ldapsearch.out' % DIRECTORY_INSTANCE_DIR ,
                'outputLdif' : '%s/ldifsearch.diff' % DIRECTORY_INSTANCE_DIR
                }
              </call>

              <call function="'checktestRC'">
                {
                'returncode' : STAXResult ,
                'result'     : STAXResult
                }
              </call>              
              
              <call function="'testCase_Postamble'"/>
              
            </sequence>
            
          </testcase>     
          
          <!--- Test Case information
            #@TestMarker          ldifsearch check behavior tests
            #@TestName            ldifsearch: check with scope option
            #@TestIssue           none
            #@TestPurpose         Verify that the entries returned by ldifseach
                                  are the same than the entries returned by
                                  ldapsearch
            #@TestPreamble        none
            #@TestStep            Do an ldapsearch with scope option.
            #@TestStep            Do an ldifsearch with the same option.
            #@TestStep            Do an ldif-dif to check the differences.
            #@TestPostamble       none
            #@TestResult          Success if ldifdiff returns no differences.
          -->
          <testcase name="getTestCaseName('ldifsearch: scope option')">
            
            <sequence>
              
              <call function="'testCase_Preamble'"/>
              
              <message>
                'ldifsearch: scope option'
              </message>
              
              <call function="'ldapSearchWithScript'">
                {
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort' : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD ,
                'dsScope'        : 'base' ,                
                'dsBaseDN'       : 'dc=com' ,
                'dsFilter'       : 'objectclass=*' ,
                'outputFile'     : 'scope_ldapsearch.out' ,
                'outputPath'     : '%s' % DIRECTORY_INSTANCE_DIR
                }                
              </call>

              <call function="'ldifSearchWithScript'">
                {
                'dsLdifFile'    : dsfilename ,
                'dsSearchScope' : 'base' ,                
                'dsBaseDN'      : 'dc=com' ,
                'dsFilter'      : 'objectclass=*' ,                
                'dsOutputFile'  : '%s/scope_ldifsearch.out' \
                                  % DIRECTORY_INSTANCE_DIR
                }                
              </call>              
              
              <call function="'LdifDiffWithScript'">
                { 
                'sourceLdif' : '%s/scope_ldifsearch.out' \
                               % DIRECTORY_INSTANCE_DIR ,
                'targetLdif' : '%s/scope_ldapsearch.out' \
                               % DIRECTORY_INSTANCE_DIR ,
                'outputLdif' : '%s/scope_ldifsearch.diff' \
                               % DIRECTORY_INSTANCE_DIR
                }
              </call>
              
              <call function="'checktestRC'">
                {
                'returncode' : STAXResult ,
                'result'     : STAXResult
                }
              </call>
              
              <call function="'testCase_Postamble'"/>
              
            </sequence>
            
          </testcase> 

          <!--- Test Case information
            #@TestMarker          ldifsearch check behavior tests
            #@TestName            ldifsearch: check with sizeLimit option
            #@TestIssue           3041
            #@TestPurpose         Verify that the entries returned by ldifseach
                                  are the same than the entries returned by
                                  ldapsearch
            #@TestPreamble        none
            #@TestStep            Do an ldapsearch with sizeLimit option.
            #@TestStep            Do an ldifsearch with the same option.
            #@TestStep            Do an ldif-dif to check the differences.
            #@TestPostamble       none
            #@TestResult          Success if ldifdiff returns no differences.
          -->
          <testcase name="getTestCaseName('ldifsearch: sizeLimit option')">
            
            <sequence>
              
              <call function="'testCase_Preamble'"/>
              
              <message>
                'ldifsearch: sizeLimit option'
              </message>
              
              <call function="'ldapSearchWithScript'">
                {
                'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort' : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD ,
                'dsSizeLimit'    : '50' ,
                'dsBaseDN'       : basedn ,
                'dsFilter'       : 'uid=user.1*' ,
                'outputFile'     : 'size_ldapsearch.out' ,
                'outputPath'     : '%s' % DIRECTORY_INSTANCE_DIR ,
                'expectedRC'     : 4 ,
                'logStderr'      : False
                }                
              </call>

              <call function="'ldifSearchWithScript'">
                {
                'dsLdifFile'   : dsfilename ,
                'dsSizeLimit'  : '50' ,
                'dsBaseDN'     : basedn ,
                'dsFilter'     : 'uid=user.1*' ,
                'dsOutputFile' : '%s/size_ldifsearch.out' \
                                 % DIRECTORY_INSTANCE_DIR ,
                'expectedRC'   : 4
                }                
              </call>              
              
              <call function="'LdifDiffWithScript'">
                { 
                'sourceLdif' : '%s/size_ldifsearch.out' \
                % DIRECTORY_INSTANCE_DIR ,
                'targetLdif' : '%s/size_ldapsearch.out' \
                % DIRECTORY_INSTANCE_DIR ,
                'outputLdif' : '%s/size_ldifsearch.diff' \
                % DIRECTORY_INSTANCE_DIR
                }
              </call>
              
              <call function="'checktestRC'">
                {
                'returncode' : STAXResult ,
                'result'     : STAXResult
                }
              </call>
              
              <script>
                knownIssue(3041)
              </script>
              
              <call function="'testCase_Postamble'"/>
              
            </sequence>
            
          </testcase>
          
          <!--- Test Case information
            #@TestMarker          ldifsearch check behavior tests
            #@TestName            ldifsearch: check behavior with a filter file
                                  (containing one filter) and search attribute
            #@TestIssue           none
            #@TestPurpose         Verify the output of ldifsearch with
                                  filter option.
            #@TestPreamble        none
            #@TestStep            Do an ldifsearch with filter file option and 
                                  a search attribute, and check that the number
                                  of entries is correct
            #@TestStep            Compare the output of the previous command to
                                  a reference file   
            #@TestPostamble       none
            #@TestResult          Success if the outputs for ldifsearch matche
                                  the refenrence outputs.
          -->
          <testcase name="getTestCaseName
          ('ldifsearch: check output using --filename and a search attribute')">
            
            <sequence>
              
              <call function="'testCase_Preamble'"/>
              
              <message>
                'ldifsearch: check output using --filename and a \
                search attribute'
              </message>
              
              <call function="'ldifSearchWithScript'">
                {
                'dsLdifFile'   : dsfilename ,                
                'dsBaseDN'     : basedn ,
                'dsFilterFile' : filterfile ,
                'dsAttributes' : 'dn' ,                
                'dsOutputFile' : '%s/ldifsearch_filterfile_and_attribute.out' \
                                 % DIRECTORY_INSTANCE_DIR
                }                
              </call>
              
              <call function="'compareFile'">
                { 
                'outputFile' : 'ldifsearch_filterfile_and_attribute.out' ,
                'refFile'    : 'ldapsearch_filterfile_and_attribute.ref'
                }
              </call>
              
              <call function="'testCase_Postamble'"/>
              
            </sequence>
            
          </testcase>
          
          <!--- Test Case information
            #@TestMarker          ldifsearch check behavior tests
            #@TestName            ldifsearch: check behavior with a filter file 
                                  containing multiple filters
            #@TestIssue           3042
            #@TestPurpose         Verify the output of ldifsearch with
                                  filter option.
            #@TestPreamble        none
            #@TestStep            Do an ldifsearch with filter file option and 
                                  check that the number of entries is correct
            #@TestPostamble       none
            #@TestResult          Success if the number of entries is 222.
          -->
          <testcase name="getTestCaseName
          ('ldifsearch: check with a filter file containing multiple filters')">
            
            <sequence>
              
              <call function="'testCase_Preamble'"/>
              
              <message>
                'ldifsearch: check with a filter file containing multiple\
                filters'
              </message>
              
              <call function="'ldifSearchWithScript'">
                {
                'dsLdifFile'       : dsfilename ,                   
                'dsBaseDN'         : basedn ,
                'dsFilterFile'     : mfilterfile          
                }                
              </call>
              
              <script>
                returnString = STAXResult[0][1]
              </script>
              
              <call function="'CheckMatches'">
                { 
                'string2find' : 'dn: ' ,
                'mainString'  : returnString ,
                'nbExpected'  : 222
                }
              </call> 
              
              <script>
                knownIssue(3042)
              </script>
              
              <call function="'testCase_Postamble'"/>
              
            </sequence>
            
          </testcase>
          
          <call function="'testSuite_Postamble'"/>
          
        </sequence>
        
      </block>
      
    </sequence>
    
  </function>
  
</stax>
