<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="synchronization_basic"/>

  <function name="synchronization_basic">

    <sequence>

      <block name="'basic'">
      <!-- Test Suite Block: Synchronization Basic -->
        <sequence>
  
          <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group']='synchronization'								  							  			  
            CurrentTestPath['suite']=STAXCurrentBlock
          </script>
            
          <call function="'testSuite_Preamble'"/>

          <!--- Test Suite information
          #@TestSuiteName       Synchronization Basic Tests
          #@TestSuitePurpose    Verify that the basic operations are synchronized correctly between two serrvers.
          #@TestSuiteID         Basic Tests
          #@TestSuiteGroup      Basic
          #@TestGroup           Synchronization
          #@TestScript          synchronization_basic.xml
          #@TestHTMLLink        http://opends.dev.java.net/
          -->
						     		              

		  <block name="'Block Create DS Topology'">
		  <!-- Create the topology necessary to the test suite -->
		    <sequence>
				
			  <script>
				basicTopologyFile = '%s/config/synchronization/basic_topology.txt' % TESTS_DIR
			  </script>
				
              <message>
                 'Create DS topology as described in %s' % basicTopologyFile
              </message>
				  
			  <call function="'createTopology'">
			    { 'topologyDescFile' : basicTopologyFile }
			  </call>  
				
			  <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
              </call>
      
            </sequence>      
          <!--- End Block Create DS Topology -->	
          </block>
		  	            
			
          <block name="'Block DS Process Active'">
          <!-- Start the servers in the topology -->			  
            <iterate var="server" in="_topologyServerList">							
              <sequence>
				  
                <message>
                  'Start DS on host  %s to run on port %s' % (server.getHostname(),server.getPort())
                </message>

                <!--- Start DS -->				         
                <call function="'StartDsWithScript'">
                  { 'location'  : server.getHostname(),
					'dsPath' : '%s/%s' % (server.getDir(),OPENDSNAME) }
                </call>
      
                <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
                </call>
      
              </sequence>			
            </iterate>		
          <!--- End Block DS Process Active -->
          </block>
      		
			
          <block name="'Block Clients'">
          <!-- Execute the tests -->     
            <sequence>

              <!-- Check that the servers in the topology started -->
              <iterate var="server" in="_topologyServerList">
                <!--- Check that DS started -->
                <call function="'isAlive'">
                  { 'location' : server.getHostname(),
	                'dsPath' : '%s/%s' % (server.getDir(),OPENDSNAME),
                    'dsInstanceHost' : server.getHostname(), 
                    'dsInstancePort' : server.getPort(),
                    'dsInstanceDn' : server.getRootDn(),
                    'dsInstancePswd' : server.getRootPwd(),
                    'noOfLoops' : 5 ,
                    'noOfMilliSeconds' : 2000 }
                </call>
		      </iterate>				
								 
		      <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
                file="'%s/testcases/synchronization/basic/synchronization_basic_setup.xml' % (TESTS_DIR)"/>
              <call function="'synchronization_basic_setup'" />
              
              <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
                file="'%s/testcases/synchronization/basic/synchronization_basic_bob.xml' % (TESTS_DIR)"/>
              <call function="'synchronization_basic_bob'" />
				 
            </sequence>                    			    				 			 
          <!--- End Block Clients -->
          </block>
			  
		   
          <block name="'Block DS Process Stop'">				
          <!-- Stop the servers in the topology -->					           
            <iterate var="server" in="_topologyServerList">				
              <sequence>
      
                <message>
                   'Stop DS on host %s running on port %s' % (server.getHostname(),server.getPort())
                </message>

                <!--- Stop DS -->					      
                <call function="'StopDsWithScript'">
                  { 'location'  : server.getHostname(),
                    'dsHost' : server.getHostname(),
                    'dsPath' : '%s/%s' % (server.getDir(),OPENDSNAME),
                    'dsPort'    : server.getPort(),
                    'dsBindDN'  : server.getRootDn(),
                    'dsBindPwd' : server.getRootPwd() }
                </call>
      
                <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
                </call>
      
              </sequence>
			</iterate>
          <!--- End Block DS Process Stop -->
          </block>
    
			
		  <block name="'Block Remove DS Topology'">
		  <!-- Remove  the topology created for the test suite -->
			<sequence>
				
              <message>
                 'Remove DS topology created for the Synchronization Basic Test Suite'
              </message>				  

			  <call function="'removeTopology'">
			    { 'multipleInstanceTopology' : True }
			  </call>  
				
			  <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
              </call>
			
			</sequence>			  
		  <!-- End Block Remove DS Topology-->  
		  </block>
			
						
          <call function="'testSuite_Postamble'"/>
      
        </sequence>
      <!-- End Test Suite Block: Synchronization Basic -->
      </block>
    
    </sequence>

  </function>

</stax>
