<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="synchronization_basic_setup"/>

  <function name="synchronization_basic_setup">

    <sequence>

      <!--- Test Case information
      #@TestMarker          Synchronization Basic Tests
      #@TestName            Synchronization: Basic: Setup
      #@TestID                  Setup
      #@TestPurpose         Setup the client for the test suite.
      #@TestPreamble
      #@TestSteps
      #@TestPostamble
      #@TestResult
      -->							
      <testcase name="'Synchronization: Basic: Setup'">
        <sequence>			
          <call function="'testCase_Preamble'"/>

          <!--- Setup the client for the Basic test suite -->			
          <message>
            'Synchronization: Basic: Setup. Get client ready for Basic tests.'
          </message>
			  			  			
			
	      <script>
            client = _topologyServerList[0]
            clientHost = client.getHostname()
            clientPath = '%s/%s' % (client.getDir(),OPENDSNAME)
            clientDataDir = '%s/functional-tests/shared/data' % client.getDir()
             
            server1 = _topologyServerList[0]
            server2 = _topologyServerList[1]
            
            synchroSuffix = server1.getSynchronizedSuffixList()[0].getSuffixDn()
            entryDn = 'uid=scarter,%s' % synchroSuffix
            mod_type = 'replace'
            attr_type = 'roomnumber'
            attr_value = '1111'			  
          </script>

			
			
          <script>			
            filename = 'synchronization_add_root_suffix.ldif'
            filePath = '%s/%s' % (TMP_DATA_DIR,filename)
            write_synchronization_add_root_suffix_ldif_file(filePath, synchroSuffix)
	      </script>
		
          <!-- Copy the synchronization_add_root_suffix ldif to client host -->
          <message>
			'Copy %s file from %s to %s' % (filename,TMP_DATA_DIR,clientDataDir)
	      </message>
          <call function="'copyFile'">
            { 'srcfile'    : filePath,
              'destfile'   : '%s/%s' % (clientDataDir,filename),
              'remotehost' : client.getHostname() }
          </call>		  
			

	      <script>
            filename = 'synchronization_add_single.ldif'
            filePath = '%s/%s' % (TMP_DATA_DIR,filename)
            write_synchronization_add_single_ldif_file(filePath, synchroSuffix)			  		   
	      </script>

          <!-- Copy the synchronization_add_single ldif to client host -->
          <message>
			'Copy %s file from %s to %s' % (filename,TMP_DATA_DIR,clientDataDir)
	      </message>
          <call function="'copyFile'">
            { 'srcfile'    : filePath,
              'destfile'   : '%s/%s' % (clientDataDir,filename),
              'remotehost' : client.getHostname() }
          </call>		  			
			

	      <script>
            filename = 'synchronization_add_multiple.ldif'
            filePath = '%s/%s' % (TMP_DATA_DIR,filename)
            write_synchronization_add_multiple_ldif_file(filePath, synchroSuffix)			  		   
	      </script>

          <!-- Copy the synchronization_add_multiple ldif to client host -->
          <message>
			'Copy %s file from %s to %s' % (filename,TMP_DATA_DIR,clientDataDir)
	      </message>
          <call function="'copyFile'">
            { 'srcfile'    : filePath,
              'destfile'   : '%s/%s' % (clientDataDir,filename),
              'remotehost' : client.getHostname() }
          </call>		  			
			
									
						
	      <script>
            filename = 'synchronization_mod.ldif'
            filePath = '%s/%s' % (TMP_DATA_DIR,filename)
            write_synchronization_mod_ldif_file(filePath, entryDn, mod_type, attr_type, attr_value)
	      </script>

          <!-- Copy the synchronization_mod ldif to client host -->
          <message>
			'Copy %s file from %s to %s' % (filename,TMP_DATA_DIR,clientDataDir)
	      </message>
          <call function="'copyFile'">
            { 'srcfile'    : filePath,
              'destfile'   : '%s/%s' % (clientDataDir,filename),
              'remotehost' : client.getHostname() }
          </call>					
              												
			
			
			
          <call function="'checktestRC'">
            { 'returncode' : RC ,
              'result'     : STAXResult }
          </call>
            
          <call function="'testCase_Postamble'"/>
            
        </sequence>
      </testcase>			  
			  			      
    </sequence>

  </function>

</stax>
