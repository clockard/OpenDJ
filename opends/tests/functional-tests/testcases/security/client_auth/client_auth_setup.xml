<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>
  
  <defaultcall function="client_auth_setup"/>
	
  <function name="client_auth_setup" scope="local">      

    <sequence>
                   
       <!--- Test Case : Server Certificate configuration -->
       <!---
            #@TestMarker              Setup Tests
            #@TestName                 Create certificates for server and client
            #@TestIssue                   
            #@TestPurpose             Create server and client certificates
            #@TestPreamble           none
            #@TestStep                  Generate server and client certificates.
            #@TestStep                  Self-sign the certificates.
            #@TestPostamble          none
            #@TestResult                Success if OpenDS returns 0 for all operations
        -->
		  
        <!-- Generate Server Cert -->
		
    <testcase name="'Security: client_auth:  Setup. certificates configuration'">
      <sequence>
        <script>
          USER_1_CERT="client-cert-1"
          USER_1_DN="uid=%s,%s" % (USER_1_CERT,DIRECTORY_INSTANCE_SFX)     			
          USER_2_CERT="client-cert-2"
          USER_2_DN="uid=%s,%s" % (USER_2_CERT,DIRECTORY_INSTANCE_SFX)
          KEYPASS="password"
          STOREPASS="password"
          SERVER_KEYPASS="servercert"
          SERVER_STOREPASS="servercert"
          CERT_TMP="%s/CERT_%s" % (DIRECTORY_INSTANCE_DIR,DIRECTORY_INSTANCE_PORT)
          CLIENT_KEYSTORE="%s/keystore" % (CERT_TMP)
    	</script>
        
 
      <message>
           '---- Generating Server Certicate -----'
      </message>
		
      <!-- create a server certificate -->           
		    
      <call function="'genCertificate'">
         { 'certAlias'        : 'server-cert' ,
            'dname'           : "uid=server,%s" % (DIRECTORY_INSTANCE_SFX),
            'keystore'        : 'keystore',
            'storepass'       : SERVER_STOREPASS,
            'keypass'         : SERVER_KEYPASS,
            'storetype'  	   : 'JKS' }
      </call>  
		  
      <!-- Self-Sign Server Cert    -->

      <message>
               '---- Self-Signing Server Certicate  ---- '
      </message>

      <call function="'SelfSignCertificate'">
          { 'certAlias'        : 'server-cert' ,
            'storepass'       : SERVER_STOREPASS,
            'keypass'         : SERVER_KEYPASS,
             'keystore'        : 'keystore',
             'storetype'  	   : 'JKS' }
      </call>
 
	    <!-- Create folder on local host where are store client keystore and certificate-->
      <message>
                'Create folder %s' % (CERT_TMP)
      </message>  
			
      <call function="'createFolder'">
          { 'location' : '%s' % (DIRECTORY_INSTANCE_HOST), 
             'foldername' : '%s' % (CERT_TMP) }
      </call>		
      <call function="'checktestRC'">
	       { 'returncode' : RC ,
	       'result'     : STAXResult }
      </call>			
			  
      <message>
               '---- Generating client Certicate : %s ---- ' % (USER_1_CERT)
      </message>
			  
      <!-- create a client certificate  : USER_1_CERT -->           		 
      <call function="'genCertificate'">
           { 'certAlias'        : '%s' % USER_1_CERT,  
            'dname'           : '%s' % (USER_1_DN),
            'storepass'       : '%s' % (STOREPASS),
            'keystore'        : '%s' % (CLIENT_KEYSTORE),
            'keypass'         : '%s' % (KEYPASS),
            'storetype'  	   : 'JKS' }
      </call> 
			   
      <!-- Self-Sign client Certificate : USER_1_CERT    -->
      <message>'---- Self-Signing client Certificate : %s ---- ' % (USER_1_CERT)</message>
      
      <call function="'SelfSignCertificate'">
           { 'certAlias'        :  '%s' % USER_1_CERT,
              'storepass'      : '%s' % (STOREPASS),
              'keypass'         : '%s' % (KEYPASS),
              'keystore'        : '%s' % (CLIENT_KEYSTORE),
              'storetype'  	 : 'JKS' }
      </call>

      <!-- create a client certificate  : USER_2_CERT -->           
      <message>'---- Self-Signing client Certificate : %s ---- ' % (USER_2_CERT)</message>
			  
      <call function="'genCertificate'">
              { 'certAlias'        : '%s' % USER_2_CERT,
                'dname'           : '%s' % (USER_2_DN),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),
                'keypass'         : '%s' % (KEYPASS),
                'storetype'  	   : 'JKS' }
      </call> 
			  
     <!-- Self-Sign client Certificate : USER_2_CERT    -->
      <message>'---- Self-Signing client Certificate : %s ---- ' % (USER_2_CERT)</message>

      <call function="'SelfSignCertificate'">
           { 'certAlias'        :  '%s' % USER_2_CERT,
              'storepass'       : '%s' % (STOREPASS),
              'keypass'         : '%s' % (KEYPASS),
              'keystore'        : '%s' % (CLIENT_KEYSTORE),
              'storetype'  	   : 'JKS' } 
      </call>
                                    
			  			  			  			      
      <call function="'testCase_Postamble'"/>
     </sequence>
    </testcase>
		  
		  			 
       <!--- Test Case : export client and server certificates -->
       <!---
            #@TestMarker              Setup Tests
            #@TestName                Export and Import Certificates
            #@TestIssue                   
            #@TestPurpose             Export  and import client and server certificates
            #@TestPreamble           none
            #@TestStep                  Export client and server certificates
		    #@TestStep                  Import the certificates in the server and clients Database
            #@TestPostamble          none
            #@TestResult                Success if OpenDS returns 0 for all operations
        -->
		  
   <testcase name="'Security: client_auth:  setup. Export and Import certificates'">
      <sequence>
          <script>
				
          CERT_TMP="%s/CERT_%s" % (DIRECTORY_INSTANCE_DIR,DIRECTORY_INSTANCE_PORT)
          CLIENT_KEYSTORE="%s/keystore" % (CERT_TMP)
    				
          USER_1_CERT="client-cert-1"
          USER_1_CERT_FILE="%s/client_cert_1.txt" % (CERT_TMP)
          USER_1_CERT_FILE_RFC="%s/client_cert_1_rfc.txt" % (CERT_TMP)				  
          USER_1_DN="uid=%s,%s" % (USER_1_CERT,DIRECTORY_INSTANCE_SFX)        
          USER_2_CERT="client-cert-2"
          USER_2_CERT_FILE="%s/client_cert_2.txt" % (CERT_TMP)
          USER_2_CERT_FILE_RFC="%s/client_cert_2_rfc.txt" % (CERT_TMP)				  
          USER_2_DN="uid=%s,%s" % (USER_2_CERT,DIRECTORY_INSTANCE_SFX)                
          SERVER_CERT_FILE="%s/server_cert.txt" % (CERT_TMP)
  				
          KEYPASS="password"
          STOREPASS="password"
          SERVER_KEYPASS="servercert"
          SERVER_STOREPASS="servercert"				
          </script>
		
			  
      <call function="'testCase_Preamble'"/>
		 
			  	
			<!-- Export the server Cert -->

      <message>'----  Export the  Server Certicate ----'</message>	  
			  
      <call function="'ExportCertificate'">
			     	{ 'certAlias'        : 'server-cert' ,
            		'outputfile'        : '%s' % (SERVER_CERT_FILE),
                    'storepass'       : SERVER_STOREPASS,
                    'storetype'  	   : 'JKS' }
      </call>	

			<!-- export client certificate : USER_1_CERT -->
      <message> '----  Export the  client certificate : : %s ---- ' % (USER_1_CERT)</message>
              
      <call function="'ExportCertificate'">
			 { 'certAlias'        : '%s' % USER_1_CERT,
                'outputfile'        : '%s' % (USER_1_CERT_FILE),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),		   
                'storetype'  	   : 'JKS' }				
      </call>			
		  		  			 
			<!-- export client certificate  RFC format : USER_1_CERT -->
      <message> '----  Export the  client certificate in RFC : : %s ---- ' % (USER_1_CERT)</message>
            
			  
      <call function="'ExportCertificate'">
			 { 'certAlias'        : '%s' % USER_1_CERT,
                'outputfile'        : '%s' % (USER_1_CERT_FILE_RFC),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),
                'format'           : 'rfc',		   
                'storetype'  	   : 'JKS' }				
      </call>
		
	 <!-- export client certificate : USER_2_CERT -->
          
      <message>'----  Export the  client certificate : : %s ---- ' % (USER_2_CERT)</message>
    	  
      <call function="'ExportCertificate'">
            { 'certAlias'        :'%s' % USER_2_CERT,
              	'outputfile'        : '%s' % (USER_2_CERT_FILE),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),
                'storetype'  	   : 'JKS' }				
      </call>

			<!-- export client certificate RFC format : USER_2_CERT -->
          
      <message>'----  Export the  client certificate in RFC format : : %s ---- ' % (USER_2_CERT)</message>
    	  
      <call function="'ExportCertificate'">
            { 'certAlias'        :'%s' % USER_2_CERT,
              	'outputfile'        : '%s' % (USER_2_CERT_FILE_RFC),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),
                'format'           : 'rfc',		  
                'storetype'  	   : 'JKS' }				
      </call>
	  			
			  <!-- Import the server Certificate under the client database -->

            <message>
               '----  Import the  Server Certificate under the client keystore----'
            </message>	  
		  
            <call function="'ImportCertificate'">
				{ 'certAlias'        : 'server-cert' ,
                'inputfile'        : '%s' % (SERVER_CERT_FILE),
                'storepass'       : '%s' % (STOREPASS),
                'keystore'        : '%s' % (CLIENT_KEYSTORE),
                'storetype'  	   : 'JKS' }
            </call>
			
			  <!-- Import the client Certificates under the server keystore  -->
    
      <message> '----  Import the  client Certificates %s under the server keystore----' % (USER_1_CERT)</message>
       
		  
      <call function="'ImportCertificate'">
				{ 'certAlias'        : '%s' % (USER_1_CERT),
              	'inputfile'        : '%s' % (USER_1_CERT_FILE),
                'storepass'       : SERVER_STOREPASS,
                'storetype'  	   : 'JKS' }
      </call>
			  
      <message> '----  Import the  client Certificates %s under the server keystore----' % (USER_2_CERT)</message> 	  
			 
      <call function="'ImportCertificate'">
				{ 'certAlias'        : '%s' % (USER_2_CERT),
              	'inputfile'        : '%s' % (USER_2_CERT_FILE),
                'storepass'       : SERVER_STOREPASS,
                'storetype'  	   : 'JKS' }
      </call>
            			  			  			  
            
      <call function="'testCase_Postamble'"/>
     </sequence>
   </testcase>
		   
		  
       <!--- Test Case : configure SSL and StartTLS -->
       <!---
            #@TestMarker              Setup Tests
            #@TestName                Configure SSL and startTLS
            #@TestIssue                   
            #@TestPurpose             Configure SSL and StartTLS
            #@TestPreamble           none
            #@TestStep                  Configure SSL
            #@TestStep                   Configure StartTLS
            #@TestPostamble          none
            #@TestResult                Success if OpenDS returns 0 for all operations
        -->
		  
		
    <testcase name="'Security: client_auth: setup. Configure SSL and StartTLS'">
     <sequence>
		  
	  <call function="'testCase_Preamble'"/>
	  <!-- Configure SSL-->

      <message>
               '----  Configure SSL ----'
      </message>	  

     <!--- Enable Key Manager Provider -->
      <message>
       'Enabling Key Manager Provider'
      </message>
      <call function="'modifyEntry'">
              {  'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,		  
                'entryToBeModified' : '%s/security/client_auth/setup/enable_key_mgr_provider.ldif' % (logsRemoteDataDir) }
      </call>

		 
     <!--- Enable Trust Manager Provider -->
      <message>
         'Enabling Trust Manager Provider'
      </message>

      <call function="'modifyEntry'">
               {  'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,	
                'entryToBeModified' : '%s/security/client_auth/setup/enable_trust_mgr_provider.ldif' % (logsRemoteDataDir) }
      </call>


      <!--- Enable LDAPS Connection Handler -->
      <message>
       'Enabling LDAPS Connection Handler - Port number'
      </message>

      <call function="'modifyEntry'">
             {  'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,	
                'entryToBeModified' : '%s/security/ldaps_port.ldif' % (logsRemoteDataDir) }
      </call>

	  <!--  Enabling LDAPS Connection Handler - Keystore type -->
      <message>
       'Enabling LDAPS Connection Handler - Keystore type'
      </message>

      <call function="'modifyEntry'">
             {  'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,	
                'entryToBeModified' : '%s/security/client_auth/setup/enable_ldaps_conn_handler.ldif' % (logsRemoteDataDir) }
      </call>
	

        <!--- Enable StartTLS -->
        <message>
         'Enabling StartTLS'
        </message>

      <call function="'addEntry'">
           {  'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                'entryToBeAdded'  : '%s/security/client_auth/setup/enable_startTLS.ldif' % (logsRemoteDataDir) }
      </call>
	
		 		 		
      <!--- Initial Search With SSL -->
      <message>
               'Security: Client_auth:  Searching with SSL Connection'
      </message>

      <call function="'ldapSearchWithScript'">
              { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_SSL_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,
			    'dsScope'           :  'base',
                'dsFilter'         : 'objectclass=*' ,
                'dsUseSSL'  	   : ' ',
                'dsTrustAll' : ' ' }
      </call>
	  

      <!--- Initial Search With startTLS-->
      <message>
               'Security: Client_auth:  Searching with StartTLS Connection'
      </message>

      <call function="'ldapSearchWithScript'">
              { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                'dsInstanceDn'     : DIRECTORY_INSTANCE_DN ,
                'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                'dsBaseDN'         : DIRECTORY_INSTANCE_SFX,
			    'dsScope'           :  'base',
                'dsFilter'         : 'objectclass=*' ,
                'dsUseStartTLS'  	   : ' ',
                'dsTrustAll' : ' ' }
      </call>

			    			  			  
      <call function="'testCase_Postamble'"/>
     </sequence>
    </testcase>
	
  	  
       <!--- Test Case : Create users entries with userCertificates -->
       <!---
            #@TestMarker              Setup Tests
            #@TestName                Create users entries
            #@TestIssue                   
            #@TestPurpose             Create users entries
            #@TestPreamble           none
            #@TestStep                  Create users entries with usercertificates
            #@TestPostamble          none
            #@TestResult                Success if OpenDS returns 0 for all operations
        -->
		  
		
    <testcase name="'Security: client_auth: setup. Create users entries'">
      <sequence>
      
      <call function="'testCase_Preamble'"/>
      <!-- Create users entries--> 
      <script>
            CERT_TMP="%s/CERT_%s" % (DIRECTORY_INSTANCE_DIR,DIRECTORY_INSTANCE_PORT)
				
            USER_1_CERT="client-cert-1"
            USER_1_CERT_FILE="%s/client_cert_1.txt" % (CERT_TMP)
            USER_1_CERT_FILE_RFC="%s/client_cert_1_rfc.txt" % (CERT_TMP)		  
            USER_1_DN="uid=%s,%s" % (USER_1_CERT,DIRECTORY_INSTANCE_SFX)
            USER_2_CERT="client-cert-2"
            USER_2_CERT_FILE_RFC="%s/client_cert_2_rfc.txt" % (CERT_TMP)
            USER_2_CERT_FILE="%s/client_cert_2.txt" % (CERT_TMP)		  
            USER_2_DN="uid=%s,%s" % (USER_2_CERT,DIRECTORY_INSTANCE_SFX)
            SERVER_CERT_FILE="%s/server_cert.txt" % (CERT_TMP)

            user1LdifFileName='user1_cert.ldif'
            user2LdifFileName='user2_cert.ldif'		  
            remoteUser1LdifFile='%s/../%s/%s' % (dsPath,relativeDataDir,user1LdifFileName)
            remoteUser2LdifFile='%s/../%s/%s' % (dsPath,relativeDataDir,user2LdifFileName)		  
            localUser1LdifFile='%s/%s' % (logsTempDir,user1LdifFileName)
            localUser2LdifFile='%s/%s' % (logsTempDir,user2LdifFileName)
      </script>
  
      <!-- Create USER_1_DN -->       
      <message> '----  Create User entry : %s----' % USER_1_DN</message>	  
        
     	<script>
            listAttr = []   
            listAttr.append('objectclass:top')
            listAttr.append('objectclass:organizationalperson')
            listAttr.append('objectclass:inetorgperson')
            listAttr.append('objectclass:person')
            listAttr.append('objectclass:ds-certificate-user') 			 
            listAttr.append('objectclass:strongAuthenticationUser')
            listAttr.append('userCertificate;binary:  bad_certificate')			 
            listAttr.append('givenname:%s' % USER_1_CERT)
            listAttr.append('sn:%s' % USER_1_CERT)
            listAttr.append('cn:%s' % USER_1_CERT)
      </script>      
		  
      <call function="'addAnEntry'">
           { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
              'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
              'dsInstanceDn'	: DIRECTORY_INSTANCE_DN ,
              'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
              'DNToAdd'	  : USER_1_DN,
              'listAttributes' : listAttr }
    	</call>
   
		  
    <!-- Extract BEGIN CERTIFICATE and END CERTIFICATE -->
	  <script>
              cert_file = open(USER_1_CERT_FILE_RFC,"r")
              ret_str = ""
              for line in cert_file.readlines():
                  index_cert = line.find("CERTIFICATE")
                  if index_cert == -1:
              		line=line.strip()
              		ret_str = ret_str + line
      </script>
     <script>
             listAttr = []  
             listAttr.append('dn: %s' % USER_1_DN)
             listAttr.append('changetype: modify')
             listAttr.append('replace: userCertificate;binary')
             listAttr.append('userCertificate;binary:: %s' % ret_str)
      </script>  
		  		  
     <!-- Write out the ldif -->
      <script>
        outfile = open(localUser1LdifFile,"w")
          
        for line in listAttr:
          outfile.write("%s\n" % line)
          
        outfile.close()
      </script>		  

      <!-- Copy the ldif file containing user certificate to remote host -->
      <message>'Copy ldif (%s) file to user entry %s  to %s' % (localUser1LdifFile,USER_1_DN,remoteUser1LdifFile)</message>
      <call function="'copyFile'">
        { 'location'   : STAXServiceMachine,
          'srcfile'    : localUser1LdifFile,
          'destfile'   : remoteUser1LdifFile,
          'remotehost' : STAF_REMOTE_HOSTNAME }
      </call>		    

	  <call function="'modifyEntry'">
		       { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                    'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                    'dsInstanceDn'	: DIRECTORY_INSTANCE_DN ,
                    'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                    'entryToBeModified'	  : '%s' % remoteUser1LdifFile }
		</call>
	 
      <!-- Create USER_2_DN : this used contains the objectclass  ds-certificate-user -->
		              
       <message>'----  Create User entry : %s----' % USER_2_DN </message>
       <message>'----  This user contains an objectclass ds-certificate-user' </message>
    
     	<script>
            listAttr = []   
            listAttr.append('objectclass:top')
            listAttr.append('objectclass:organizationalperson')
            listAttr.append('objectclass:inetorgperson')
            listAttr.append('objectclass:person')
            listAttr.append('objectclass:ds-certificate-user') 			 
            listAttr.append('objectclass:strongAuthenticationUser')
            listAttr.append('userCertificate;binary:  bad_certificate')			 
            listAttr.append('givenname:%s' % USER_2_CERT)
            listAttr.append('sn:%s' % USER_2_CERT)
            listAttr.append('cn:%s' % USER_2_CERT)
      </script>      
              
      <call function="'addAnEntry'">
           { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
             'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
             'dsInstanceDn'	: DIRECTORY_INSTANCE_DN ,
             'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
             'DNToAdd'	  : USER_2_DN,
             'listAttributes' : listAttr }
  	  </call>
            	

   
      <!-- Extract BEGIN CERTIFICATE and END CERTIFICATE -->
	  <script>
              cert_file = open(USER_2_CERT_FILE_RFC,"r")
              ret_str = ""
              for line in cert_file.readlines():
                  index_cert = line.find("CERTIFICATE")
                  if index_cert == -1:
              		line=line.strip()
              		ret_str = ret_str + line
      </script>
		  
 	<!-- Modify the user Entry to store the certificates -->	  

      <script>
             listAttr = []  
             listAttr.append('dn: %s' % USER_2_DN)
             listAttr.append('changetype: modify')
             listAttr.append('replace: userCertificate;binary')
             listAttr.append('userCertificate;binary:: %s' % ret_str)
      </script>  
		  		  
     <!-- Write out the ldif -->
      <script>
        outfile = open(localUser2LdifFile,"w")
          
        for line in listAttr:
          outfile.write("%s\n" % line)
          
        outfile.close()
      </script>		  

      <!-- Copy the ldif file containing user certificate to remote host -->
      <message>'Copy ldif (%s) file to user entry %s  to %s' % (localUser2LdifFile,USER_2_DN,remoteUser2LdifFile)</message>
      <call function="'copyFile'">
        { 'location'   : STAXServiceMachine,
          'srcfile'    : localUser2LdifFile,
          'destfile'   : remoteUser2LdifFile,
          'remotehost' : STAF_REMOTE_HOSTNAME }
      </call>		    

	  <call function="'modifyEntry'">
		       { 'dsInstanceHost'   : DIRECTORY_INSTANCE_HOST ,
                    'dsInstancePort'   : DIRECTORY_INSTANCE_PORT ,
                    'dsInstanceDn'	: DIRECTORY_INSTANCE_DN ,
                    'dsInstancePswd'   : DIRECTORY_INSTANCE_PSWD ,
                    'entryToBeModified'	  : '%s' % remoteUser2LdifFile }
		</call>

		  		  
      <call function="'testCase_Postamble'"/>
    </sequence>
    </testcase>
          		
</sequence>
</function>

</stax>
