<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="replication_basic"/>

  <function name="replication_basic">

    <sequence>

      <block name="'basic'">

        <sequence>
    
          <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group']='replication'                 
            CurrentTestPath['suite']=STAXCurrentBlock
          </script>
    
          <call function="'testSuite_Preamble'"/>
                                                
          <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
            file="'%s/testcases/replication/replication_setup.xml' % (TESTS_DIR)"/>
          <call function="'replication_setup'" />
    
          <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
            file="'%s/testcases/replication/basic/replication_basic_setup.xml' % (TESTS_DIR)"/>
          <call function="'replication_basic_setup'" />
                    			    
          <!--- Test Case information
          #@TestMarker          Replication Basic Tests
          #@TestName            Replication: Basic: Add Entry
          #@TestID                  Add Entry
          #@TestPurpose         Check that an entry add is well propagated by replication.
          #@TestPreamble
          #@TestSteps
          #@TestPostamble
          #@TestResult
          -->									
          <testcase name="'Replication: Basic: Add Entry'">
            <sequence>
              <call function="'testCase_Preamble'"/>
              <message>
                 'Replication: Basic: Add Entry. Check that an added entry is well propagated by replication.'
              </message>
    
              <call function="'addEntry'">
                { 'location'       : clientHost,
                  'dsPath'         : clientPath,
                  'dsInstanceHost' : server1.getHostname(),
                  'dsInstancePort' : server1.getPort(), 
                  'dsInstanceDn'   : server1.getRootDn(),
                  'dsInstancePswd' : server1.getRootPwd(),
                  'entryToBeAdded' : '%s/replication_add_root_suffix.ldif' % clientDataDir }
              </call>
    
              <call function="'checkRC'">
                  { 'returncode' : RC,
                    'result'     : STAXResult }
              </call>
    		
    			    
              <call function="'SearchObject'">
                { 'location' : clientHost,
                  'dsPath' : clientPath,
                  'dsInstanceHost'   : server2.getHostname() ,
                  'dsInstancePort'   : server2.getPort() ,
                  'dsInstanceDn'     : server2.getRootDn() ,
                  'dsInstancePswd'   : server2.getRootPwd() ,
                  'dsBaseDN'         : synchroSuffix ,
                  'dsFilter'         : 'objectclass=*' }                  
              </call>
    
              <call function="'checktestRC'">
                  { 'returncode' : RC,
                    'result'     : STAXResult,
                    'expected'   : 0 }
              </call>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
    
    	
    
          <!--- Test Case information
          #@TestMarker          Replication Basic Tests
          #@TestName            Replication: Basic: Modify Entry
          #@TestID                  Modify Entry
          #@TestPurpose         Check that an entry modify is well propagated by replication.
          #@TestPreamble
          #@TestSteps
          #@TestPostamble
          #@TestResult
          -->											
          <testcase name="'Replication: Basic: Modify Entry'">
            <sequence>
              <call function="'testCase_Preamble'"/>
              <message>
                 'Replication: Basic: Modify Entry. Check that an entry modify is well propagated by replication.'
              </message>
    
              <call function="'addEntry'">
                { 'location'        : clientHost,
                  'dsPath'          : clientPath,
                  'dsInstanceHost'  : server1.getHostname(),
                  'dsInstancePort'  : server1.getPort() ,
                  'dsInstanceDn'    : server1.getRootDn() ,
                  'dsInstancePswd'  : server1.getRootPwd() ,
                  'entryToBeAdded'  : '%s/replication_add_single.ldif' % clientDataDir }
              </call>
    
              <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
              </call>				
    		
    		
              <call function="'modifyEntry'">
                { 'location'          : clientHost,
                  'dsPath'            : clientPath,
                  'dsInstanceHost'    : server1.getHostname() ,
                  'dsInstancePort'    : server1.getPort() ,
                  'dsInstanceDn'      : server1.getRootDn() ,
                  'dsInstancePswd'    : server1.getRootPwd() ,
                  'entryToBeModified' : '%s/replication_mod.ldif' % clientDataDir }
              </call>
    
              <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
              </call>
    		
    			    
              <call function="'SearchObject'">
                { 'location'         : clientHost,
                  'dsPath'           : clientPath,
                  'dsInstanceHost'   : server2.getHostname() ,
                  'dsInstancePort'   : server2.getPort() ,
                  'dsInstanceDn'     : server2.getRootDn() ,
                  'dsInstancePswd'   : server2.getRootPwd() ,
                  'dsBaseDN'         : entryDn,
                  'dsFilter'         : '%s=%s' % (attr_type,attr_value) }                  
              </call>
    
              <call function="'checktestRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult ,
                    'expected'   : 0 }
              </call>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
    				
    
          <!--- Test Case information
          #@TestMarker          Replication Basic Tests
          #@TestName            Replication: Basic: Delete Entry
          #@TestID                  Delete Entry
          #@TestPurpose         Check that an entry delete is well propagated by replication.
          #@TestPreamble
          #@TestSteps
          #@TestPostamble
          #@TestResult
          -->											
          <testcase name="'Replication: Basic: Delete Entry'">
            <sequence>
              <call function="'testCase_Preamble'"/>
              <message>
                 'Replication: Basic: Delete Entry. Check that an entry delete is well propagated by replication.'
              </message>
    
              <call function="'DeleteEntry'">
                { 'location'         : clientHost,
                  'dsPath'           : clientPath,
                  'dsInstanceHost'   : server1.getHostname() ,
                  'dsInstancePort'   : server1.getPort() ,
                  'dsInstanceDn'     : server1.getRootDn() ,
                  'dsInstancePswd'   : server1.getRootPwd() ,
                  'dsBaseDN'         : entryDn }
              </call>
    
              <call function="'checkRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult }
              </call>
    		
    			    
              <call function="'SearchObject'">
                { 'location' : clientHost,
                  'dsPath' : clientPath,
                  'dsInstanceHost'   : server2.getHostname() ,
                  'dsInstancePort'   : server2.getPort() ,
                  'dsInstanceDn'     : server2.getRootDn() ,
                  'dsInstancePswd'   : server2.getRootPwd() ,
                  'dsBaseDN'         : entryDn,
                  'dsFilter'         : 'objectclass=*' }                  
              </call>
    
              <call function="'checktestRC'">
                  { 'returncode' : RC ,
                    'result'     : STAXResult ,
                    'expected'   : 32 }
              </call>
              <call function="'testCase_Postamble'"/>
            </sequence>
          </testcase>
    			
          <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
            file="'%s/testcases/replication/replication_cleanup.xml' % (TESTS_DIR)"/>
          <call function="'replication_cleanup'" />
                          
          <call function="'testSuite_Postamble'"/>
        
        </sequence>
    
      </block>
    
    </sequence>

  </function>

</stax>
