<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2006-2007 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="replication_setup"/>

  <function name="replication_setup">
    <function-map-args>
      <function-arg-def name="topologyFile" type="optional" default="'%s/config/replication/basic_topology.txt' % TESTS_DIR">
        <function-arg-description>
          Pathname to file describing the topology.
        </function-arg-description>
        <function-arg-property name="type" value="filepath"/>
      </function-arg-def>
    </function-map-args>    
    
    <sequence>

      <block name="'replication-setup'">

        <sequence>
      
          <message>
             'Create DS topology as described in %s' % topologyFile
          </message>

          <script>
            try:
              if REPLICATION_CONFIG_FILE:
                topologyFile=REPLICATION_CONFIG_FILE
            except NameError:
              topologyFile=topologyFile
          </script>
                 
          <call function="'createTopology'">
            { 'topologyDescFile' : topologyFile,
              'sharedDataFolder' : 'replication' }
          </call>  
      
          <call function="'checkRC'">
            { 'returncode' : RC ,
              'result'     : STAXResult }
          </call>

          <!-- Setup variables -->
          <script>
            client = _topologyServerList[0]
            clientHost = client.getHostname()
            clientPath = '%s/%s' % (client.getDir(),OPENDSNAME)
            clientDataDir = '%s/%s' % (client.getDir(),relativeDataDir)
             
            server1 = _topologyServerList[0]
            server2 = _topologyServerList[1]          
              
            master = _topologyServerList[0]
            masterHost = master.getHostname()
            masterReplicationServer = master.getChangelogServer()
            masterPath = '%s/%s' % (master.getDir(),OPENDSNAME)
            masterDataDir = '%s/%s' % (master.getDir(),relativeDataDir)

            consumerList = _topologyServerList[1:]              
          </script>        
                          
          <!-- Start the servers in the topology -->        
          <call function="'startServers'">
            [_topologyServerList]
          </call>            

          <!-- Special setup for testcase:   Replication: Total Update: Schema total update
            Modify schema in one server before replication is enabled.  -->        
          <if expr="CurrentTestPath['suite'] == 'main.replication.total-update'">
            <sequence>
              <script>
                newObjectclass = '( testobjectclass1-oid NAME \'testobjectclass-1\' SUP person MAY ( street $ testattribute-1 $ c ) X-ORIGIN \'user defined\' )'
                newAttributetype = '( testattribute1-oid NAME \'testattribute-1\' SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN \'user defined\' )'
              </script>
                
              <!-- Modify schema  in "master" server -->
              <call function="'modifyAnAttribute'">
                { 'dsPath' : masterPath,
                  'dsInstanceHost'   : masterHost ,
                  'dsInstancePort'    : master.getPort(),
                  'dsInstanceDn'  : master.getRootDn(),
                  'dsInstancePswd'    : master.getRootPwd(),
                  'DNToModify'    : 'cn=schema',
                  'attributeName' : 'attributeTypes',
                  'newAttributeValue' : newAttributetype, 
                  'changetype' : 'add' }
              </call>                
              <call function="'modifyAnAttribute'">
                { 'dsPath' : masterPath,
                  'dsInstanceHost'   : masterHost ,
                  'dsInstancePort'    : master.getPort(),
                  'dsInstanceDn'  : master.getRootDn(),
                  'dsInstancePswd'    : master.getRootPwd(),
                  'DNToModify'    : 'cn=schema',
                  'attributeName' : 'objectClasses',
                  'newAttributeValue' : newObjectclass, 
                  'changetype' : 'add' }
              </call>                
            </sequence>
          </if>
              
          <iterate var="server" in="consumerList">
            <sequence>
              <!-- Configure replication if required so by the server
              !  (i.e. server is a changelog server and/or has synchronized suffixes) 
              -->
              <if expr="server.requiresSynchronization()">
                <sequence>          
                  <message>
                    'Instance requires REPLICATION configuration.'
                  </message>
                    
                  <script>
                    replicationServer = server.getChangelogServer()
                    replicatedSuffixList = server.getSynchronizedSuffixList()
                    replicatedDnList = []
                    for suffix in replicatedSuffixList:
                      replicatedDnList.append(suffix.getSuffixDn())
                  </script>
                                        
                  <message>
                    'Enable replication for server:\nHost: %s\nLdap port: %s\nReplication port: %s\nReplicated DN list: %s' % (server.getHostname(), server.getPort(), replicationServer.getPort(), replicatedDnList)
                  </message>
                                        
                  <call function="'enableReplication'">
                    { 'location'  :  clientHost,
                      'dsPath'  :  clientPath,
                      'dsInstanceHost'  :  server.getHostname(),
                      'dsInstancePort'  :  server.getPort(),
                      'dsInstanceDn'  :  server.getRootDn(),
                      'dsInstancePswd'  :  server.getRootPwd(),
                      'dsReplicationPort'  :  replicationServer.getPort(),
                      'refInstanceHost'  :  masterHost,
                      'refInstancePort'  :  master.getPort(),
                      'refInstanceDn'  :  master.getRootDn(),
                      'refInstancePswd'  :  master.getRootPwd(),
                      'refReplicationPort'  :  masterReplicationServer.getPort(),
                      'replicationDnList'  :  replicatedDnList }                      
                  </call>
                </sequence>
              </if>                
                
            </sequence>              
          </iterate>                   
                                                                                             
        </sequence>

      </block>
    
    </sequence>

  </function>

</stax>
