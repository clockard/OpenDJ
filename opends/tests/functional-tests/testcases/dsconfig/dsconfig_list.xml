<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Portions Copyright 2007-2008 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="dsconfig_list"/>

  <function name="dsconfig_list">

    <sequence>

      <block name="'dsconfig-list'">
      
        <sequence>
  
        <script>
            if not CurrentTestPath.has_key('group'):
              CurrentTestPath['group']='aci'                
            CurrentTestPath['suite']=STAXCurrentBlock
        </script>
      
        <call function="'testSuite_Preamble'"/>
          
        <import machine="STAF_LOCAL_HOSTNAME"
            file="'%s/testcases/dsconfig/dsconfig_setup.xml' % (TESTS_DIR)"/>
        <call function="'dsconfig_setup'" />

                            
        <script>
            componentList = []
         
            f = open('%s/testcases/dsconfig/list.dat' % (TESTS_DIR),'r')
            for line in f.readlines():
                if line.startswith('#'):
                    continue
                else: 
                    lineSingle = line.split(':')
                    componentList.append(lineSingle)
          
            componentNumber=0
            testNumber=0
        </script>
        <iterate var="dummyIndex" in="componentList">
          <sequence>
            <testcase name="getTestCaseName(componentList[componentNumber][0])" >
              <sequence>
                <call function="'testCase_Preamble'" />
                <message>
                    'Listing component %s, %s, %s' % (componentList[componentNumber][0], componentList[componentNumber][1], componentList[componentNumber][2])
                </message>
                
                <if expr="componentList[componentNumber][0] == 'list-local-db-indexes'">
                  <call function="'dsconfig'">
                  {
                    'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                    'dsInstancePort' : DIRECTORY_INSTANCE_PORT ,
                    'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
                    'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD , 
                    'subcommand'     :  '%s' % componentList[componentNumber][0] ,
                    'objectType'     :  'backend-name' ,
                    'objectName'     :  'userroot' ,
                    'expectedRC'     : 0 
                  }
                  </call>
                <else>
                  <call function="'dsconfig'">
                  {
                    'dsInstanceHost' : DIRECTORY_INSTANCE_HOST ,
                    'dsInstancePort' : DIRECTORY_INSTANCE_PORT ,
                    'dsInstanceDn'   : DIRECTORY_INSTANCE_DN ,
                    'dsInstancePswd' : DIRECTORY_INSTANCE_PSWD , 
                    'subcommand'     :  '%s' % componentList[componentNumber][0] ,
                    'expectedRC'     : 0 
                  }
                  </call>
                </else>
                </if>
              
                <script> 
                 returnString = STAXResult[0][1]
                </script> 
    
                <call function="'searchStringForSubstring'">
                    { 'returnString'       : returnString ,
                      'testString'         : componentList[componentNumber][1]  ,
                      'expectedResult'     : '1' }
                </call>
                
                <call function="'checktestString'">
                    { 'returnString'       : returnString ,
                      'expectedString'     : componentList[componentNumber][2] }
                </call>
                
                <call function="'testCase_Postamble'" />
                <script>
                    componentNumber=componentNumber+1
                </script>
              </sequence>
            </testcase>
          </sequence>
        </iterate>
       
        <import machine="STAF_LOCAL_HOSTNAME"
            file="'%s/testcases/dsconfig/dsconfig_cleanup.xml' % (TESTS_DIR)"/>
        <call function="'dsconfig_cleanup'" />

                            
        <call function="'testSuite_Postamble'"/>
        
        </sequence>
      </block>
    </sequence>
  </function>

</stax>
