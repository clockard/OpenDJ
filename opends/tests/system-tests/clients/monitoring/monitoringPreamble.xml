<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="monitoringPreamble"/>

  <!-- ************************************************************ -->
  <!-- Client preamble is automatically called by the scheduler     -->
  <!-- and must always define all the parameters below              -->
  <function name="monitoringPreamble" scope="local">
    <function-map-args>
      <function-arg-def name="client"     type="required"/>
      <function-arg-def name="instances"  type="required"/>
      <function-arg-def name="duration"   type="required"/>
      <function-arg-def name="suffix"     type="required"/>
      <function-arg-def name="outFile"    type="required"/>
      <function-arg-def name="fileFd"     type="required"/>
    </function-map-args>
    
    <sequence>
      <!-- ===================   Comments   =================== -->
      <!-- client is run under paralleliterate tag              -->
      <!-- each variables defined are internal                  -->
      <!-- client should have its own err_num variable in order -->
      <!-- to inform scheduler if it has pass/fail status       -->
      <script>
        errNum = 0
        msg = ''
      </script>
      <!-- ==================    Parser     =================== -->
      <!-- parse the client parameters :                        -->
      <!-- params is [[param1,val1],[param2,val2],...]          -->
      <!-- get the ldap instance parameters                     -->
      <import machine="'%s' % (STAF_LOCAL_HOSTNAME)"
              file="'%s/%sLib.xml' % (client.getPath(),client.getName())"/>
      <call function="'%sParser' % client.getName()">
      {
        'client'     : client,
        'instances'  : instances,
        'duration'   : duration,
        'suffix'     : suffix
      }
      </call>
      <if expr="msg.find('ERROR') != -1">
        <sequence>
          <message>'%s' % msg</message>
          <call function="'writeOperationResult'">
            {
              'returncode' : '1',
              'expected'   : '0',
              'result'     : msg,
              'status'     : 'ERROR',
              'fileFd'     : fileFd
            }
          </call>
          <script>
            errNum += 1
          </script>
        </sequence>
      <else>
        <sequence>
          <if expr="needCopy == 1">
            <sequence>
              <call function="'copyFile'">
              {
                'srcFile'    : '%s/scenario/%s/%s' % \
                               (TESTS_DIR,scenario.getName(),configFile),
                'destFile'   : configFilePath,
                'location'   : STAXServiceMachine,
                'remoteHost' : client.getHost(),
                'fileFd'     : fileFd
              }
              </call>
              <script>errNum += STAXResult[0]</script>
            </sequence>
          </if>
          
          
          <!-- ========================================================== -->
          <!-- =============== Build Monitoring Client ================== -->
          <!-- ========== Run the client ========== -->
          <call function="'writeStartTagOperation'">
          { 'tagName' : 'buildMonitoringClient',
            'fileFd'  : fileFd }
          </call>
          <call function="'createFolder'">
            { 'location'   : client.getHost(),
              'foldername' : monitoringLib,
              'fileFd'     : fileFd
            }
          </call>
          <call function="'createFolder'">
            { 'location'   : client.getHost(),
              'foldername' : monitoringBuild,
              'fileFd'     : fileFd
            }
          </call>
          <!-- == Dependency with jdmkrt.jar from openDMK             == -->
          <!-- Copy jar in client host -->
          <call function="'copyFile'">
          {
            'srcFile'    : externalTools.getJdmkrtPath(),
            'destFile'   : jdmkrt,
            'location'   : STAXServiceMachine,
            'remoteHost' : client.getHost(),
            'fileFd'     : fileFd
          }
          </call>
          
          <!-- == Dependency with snmp-mib2605.jar in opends instance == -->
          <!-- Copy jar in client host -->
          <call function="'copyFile'">
          {
            'srcFile'    : '%s/lib/extensions/snmp-mib2605.jar' % \
                           instances[0].getInstallDir(),
            'destFile'   : snmpMib,
            'location'   : instances[0].getHost(),
            'remoteHost' : client.getHost(),
            'fileFd'     : fileFd
          }
          </call>
          
          <!-- == Run javac                                           == -->
          <call function="'listFolderByExtension'" >
            { 
            'location'   : client.getHost(),
            'foldername' : monitoringSrc,
            'extension'  : 'java',
            'fileFd'     : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
            files   = STAXResult[1]
          </script>
          
          <script>
            list = ""
            for file in files:
              list = list + " " + file
            
            jparms = []
            jparms.append('-sourcepath %s/src' % monitoring)
            jparms.append('-cp %s:%s' % (jdmkrt,snmpMib))
            jparms.append('%s' % list)
            jparms.append('-d %s' % monitoringBuild)
            jparms = ' '.join(jparms)
          </script>
          <call function="'runCommand'" >
            { 
            'name'      : 'Compile Monitoring Client on %s' % client.getHost(),
            'command'   : '%s/bin/javac' % JAVA_HOME,
            'arguments' : jparms,
            'location'  : client.getHost(),
            'path'      : monitoringSrc,
            'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
          <!-- == Create jar file                                      == -->
          <script>
            jparms = []
            jparms.append('cfe %s/MonitoringClient.jar' % monitoring)
            jparms.append('org.opends.testqa.monitoringclient.MonitoringClient')
            jparms.append('-C %s' % monitoringBuild)
            jparms.append('.')
            jparms = ' '.join(jparms)
          </script>
          <call function="'runCommand'" >
            { 
            'name'      : 'Create jar for Monitoring Client on %s' % \
                          client.getHost(),
            'command'   : '%s/bin/jar' % JAVA_HOME,
            'arguments' : jparms,
            'location'  : client.getHost(),
            'path'      : monitoringBuild,
            'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
          
          
          <call function="'writeEndTagOperation'">{'fileFd'  : fileFd}</call>
          
          
          <!-- ========================================================== -->
          <!-- ============== Build generate chart tool ================= -->
          <call function="'writeStartTagOperation'">
          { 'tagName' : 'buildChartGeneratorTool',
            'fileFd'  : fileFd }
          </call>
          
          <call function="'createFolder'">
            { 'location'   : client.getHost(),
              'foldername' : chartGenLib,
              'fileFd'     : fileFd
            }
          </call>
          <call function="'createFolder'">
            { 'location'   : client.getHost(),
              'foldername' : chartGenBuild,
              'fileFd'     : fileFd
            }
          </call>
          <!-- == Dependency with jcommon.jar                        == -->
          <!-- Copy jar in client host -->
          <call function="'copyFile'">
          {
            'srcFile'    : externalTools.getJcommonPath(),
            'destFile'   : jcommon,
            'location'   : STAXServiceMachine,
            'remoteHost' : client.getHost(),
            'fileFd'     : fileFd
          }
          </call>
          
          <!-- == Dependency with jfreechart                         == -->
          <!-- Copy jar in client host -->
          <call function="'copyFile'">
          {
            'srcFile'    : externalTools.getJfreechartPath(),
            'destFile'   : jfreechart,
            'location'   : STAXServiceMachine,
            'remoteHost' : client.getHost(),
            'fileFd'     : fileFd
          }
          </call>
          
          <!-- == Run javac                                           == -->
          <script>
            jparms = []
            jparms.append('-sourcepath %s/src' % chartGen)
            jparms.append('-cp %s:%s' % (jfreechart,jcommon))
            jparms.append('%s/src/org/opends/testqa/monitoringclient/ChartGenerator.java'%\
                         chartGen)
            jparms.append('-d %s' % chartGenBuild)
            jparms = ' '.join(jparms)
          </script>
          <call function="'runCommand'" >
            { 
            'name'      : 'Compile Chart Generator tool on %s' % \
                          client.getHost(),
            'command'   : '%s/bin/javac' % JAVA_HOME,
            'arguments' : jparms,
            'location'  : client.getHost(),
            'path'      : chartGen,
            'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
          <!-- == Create jar file                                      == -->
          <script>
            jparms = []
            jparms.append('cfe %s/ChartGenerator.jar' % chartGen)
            jparms.append('org.opends.testqa.monitoringclient.ChartGenerator')
            jparms.append('-C %s' % chartGenBuild)
            jparms.append('.')
            jparms = ' '.join(jparms)
          </script>
          <call function="'runCommand'" >
            { 
            'name'      : 'Create jar for Chart Generator tool on %s' % \
                          client.getHost(),
            'command'   : '%s/bin/jar' % JAVA_HOME,
            'arguments' : jparms,
            'location'  : client.getHost(),
            'path'      : chartGenBuild,
            'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
          <call function="'writeEndTagOperation'">{'fileFd'  : fileFd}</call>
          
        </sequence>
      </else>
      </if>
      
      <return> errNum </return>
      
    </sequence>
  </function>

</stax>
