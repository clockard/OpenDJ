<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>

  <defaultcall function="restartDs"/>



  <!-- ************************************************************ -->
  <function name="restartDs" scope="local">
    <function-map-args>
      <function-arg-def name="workingDir" type="required">
      </function-arg-def>
      <function-arg-def name="client" type="required">
      </function-arg-def>
      <function-arg-def name="instances" type="required">
      </function-arg-def>
      <function-arg-def name="duration" type="required">
      </function-arg-def>
      <function-arg-def name="fileFd" type="required">
      </function-arg-def>
    </function-map-args>
    
    <sequence>
    
      <!-- ===================   Comments   =================== -->
      <!-- client is run under paralleliterate tag              -->
      <!-- each variables defined are internal                  -->
      <!-- client should have its own err_num variable in order -->
      <!-- to inform scheduler if it has pass/fail status       -->
      <script>
        errNum = 0
      </script>
      
      <!-- ==================    Preamble   =================== -->
      <!-- parse the client parameters :                        -->
      <!-- params is [[param1,val1],[param2,val2],...]          -->
      <!-- get the ldap instance parameters                     -->
      <script>
        cParams = client.getParams()
        serverInstanceFromClient = cParams[0][1]
        
        sys.path.append("%s/phases/scheduler" % TESTS_DIR )
        from scheduler import getInstance
        serverInstance = getInstance(serverInstanceFromClient,instances)
        if (serverInstance == 'ERROR'):
          msg = 'ERROR: cant find client instance named'
          msg = '%s %s in server instance list' %(msg,serverInstanceFromClient)
      </script>
      
      <if expr="msg.find('ERROR') != -1">
        <sequence>
          <message>'%s' % msg</message>
          <call function="'writeOperationResult'">
            {
              'returncode' : '1',
              'expected'   : '0',
              'result'     : msg,
              'status'     : 'ERROR',
              'fileFd'     : fileFd
            }
          </call>
        </sequence>
      <else>
        <sequence>
          
          <!-- ==== Stop DS ==== -->
          <call function="'StopDsWithScript'">
            { 'location'  : serverInstance.getHost(),
              'dsPath'    : serverInstance.getInstallDir(),
              'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
          <!-- ==== Start DS ==== -->
          <call function="'StartDsWithScript'">
            { 'location'  : serverInstance.getHost(),
              'dsPath'    : serverInstance.getInstallDir(),
              'fileFd'    : fileFd
            }
          </call>
          <script>
            errNum += STAXResult[0]
          </script>
          
        </sequence>
      </else>
      </if>
      
      <return> errNum </return>
      
    </sequence>
    
  </function>
  
  
  
</stax>

