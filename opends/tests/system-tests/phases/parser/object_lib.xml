<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>
  <!-- ************************************************************ -->
  <!--                    Libs for instance object                  -->
  <!-- ************************************************************ -->
  <function name="getOpendsInstancesInATopology" scope="local">
   <function-prolog>
      'return the list of opends instances in a topology (using same suffix)'
    </function-prolog>
    <function-map-args>
      <function-arg-def name="suffix" type="required">
        <function-arg-description>
          suffix object
        </function-arg-description>
      </function-arg-def>
    </function-map-args>
    <sequence>
      <script>
        opendsInstances = []
        topoInstances   = suffix.getTopology()
        
        for topoInstance in topoInstances:
          cInstance = topoInstance.getInstanceRef()
          if cInstance.getProduct() == 'opends':
            opendsInstances.append(cInstance)
      </script>
      
      <return>opendsInstances</return>
    </sequence>
  </function>
  
  
  
  
  <!-- ************************************************************ -->
  <!--                    Libs for client object                    -->
  <!-- ************************************************************ -->
  
  
  <!-- ************************************************************ -->
  <function name="getEnabledClients" scope="local">
   <function-prolog>
      'return the list of enabled clients defined in the scheduler'
    </function-prolog>
    <function-map-args>
      <function-arg-def name="scheduler" type="required">
        <function-arg-description>
          scheduler object
        </function-arg-description>
      </function-arg-def>
    </function-map-args>
    <sequence>
      <script>
        clients = []
        for module in scheduler:
          if (module.getEnabled() == "true"):
            clients.extend(module.getClients())
      </script>
      
      <return>clients</return>
    </sequence>
  </function>
</stax>

