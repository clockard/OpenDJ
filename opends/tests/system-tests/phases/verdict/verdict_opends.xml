<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../../shared/stax.dtd">
<!--
 ! CDDL HEADER START
 !
 ! The contents of this file are subject to the terms of the
 ! Common Development and Distribution License, Version 1.0 only
 ! (the "License").  You may not use this file except in compliance
 ! with the License.
 !
 ! You can obtain a copy of the license at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE
 ! or https://OpenDS.dev.java.net/OpenDS.LICENSE.
 ! See the License for the specific language governing permissions
 ! and limitations under the License.
 !
 ! When distributing Covered Code, include this CDDL HEADER in each
 ! file and include the License file at
 ! trunk/opends/resource/legal-notices/OpenDS.LICENSE.  If applicable,
 ! add the following below this CDDL HEADER, with the fields enclosed
 ! by brackets "[]" replaced with your own identifying information:
 !      Portions Copyright [yyyy] [name of copyright owner]
 !
 ! CDDL HEADER END
 !
 !      Copyright 2008 Sun Microsystems, Inc.
 ! -->
<stax>
  
  <defaultcall function="verdictOpends"/>
  
  
  <!-- ************************************************************ -->
  <function name="verdictOpends" scope="local">
    <function-map-args>
      <function-arg-def name="instance" type="required">
        <function-arg-description>
          opends instance object
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="instances" type="required">
        <function-arg-description>
          list of instance objects
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="suffix" type="required">
        <function-arg-description>
          suffix object
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="fileFd" type="required">
        <function-arg-description>
          file descriptor, wildcard : NO_FILE to not write into a file
        </function-arg-description>
      </function-arg-def>
    </function-map-args>
    
    <sequence>
      <!--== Get the list of opends instances in the topology == -->
      <script>
        opendsInstances = []
        topoInstances   = suffix.getTopology()
        
        for topoInstance in topoInstances:
          cInstance = topoInstance.getInstanceRef()
          if cInstance.getProduct() == 'opends':
            opendsInstances.append(cInstance)
      </script>
      
      
      <!--==== Check server is alive =========-->
      <call function="'isAlive'">
        { 'location'         : instance.getHost(),
          'noOfLoops'        : 1,
          'noOfMilliSeconds' : 2000,
          'dsPath'           : instance.getInstallDir(),
          'dsInstanceHost'   : instance.getHost(),
          'dsInstancePort'   : instance.getLDAPPort(),
          'fileFd'           : fileFd
        }
      </call>
      <script>isAliveResult = STAXResult</script>
      <if expr="isAliveResult == FALSE">
        <call function="'checkRC'">
          { 
            'returncode' : isAliveResult,
            'result'     : 'Server does not responding',
            'fileFd'     : fileFd
          }
        </call>
      </if>
      
      
      <!--==== Check replication synchronization =========-->
      <!--
      <call function="'checkReplicationSynchro'">
          { 'instance' : instance,
            'fileFd'   : fileFd
          }
      </call>
      -->
      
      <!--==== Compare entries =========-->
      <call function="'verifyTrees'">
        {
          'location'   : instance.getHost(),
          'instance'   : instance,
          'instances'  : opendsInstances,
          'suffixDn'   : suffix.getSuffixDn(),
          'filePrefix' : 'verdict',
          'fileFd'     : fileFd
        }
      </call>
      
      
      <!--== Check error/access logs =========-->
      <call function="'checkLogs'">
        {
          'location'   : instance.getHost(),
          'installDir' : instance.getInstallDir(),
          'fileFd'     : fileFd
        }
      </call>
    
    </sequence>
  </function>

  <!-- ************************************************************ -->
  <function name="checkReplicationSynchro" scope="local">
    <function-map-args>
      <function-arg-def name="instance" type="required">
        <function-arg-description>
          instance object
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="fileFd" type="required">
        <function-arg-description>
          Name of output file descriptor
        </function-arg-description>
      </function-arg-def>
    </function-map-args>
    
    <sequence>
      <call function="'writeStartTagStep'">
      { 'tagName' : 'checkReplicationSynchro',
        'fileFd'  : fileFd }
      </call>
      
      <message>'TBD'</message>
      
      <call function="'writeEndTagStep'">{ 'fileFd' : fileFd}</call>
    </sequence>
  </function>

  <!-- ************************************************************ -->
  <function name="checkLogs" scope="local">
    <function-map-args>
      <function-arg-def name="location" type="optional"
                        default="STAF_REMOTE_HOSTNAME">
        <function-arg-description>
          Location of target host
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="installDir" type="required">
        <function-arg-description>
          instance installation path
        </function-arg-description>
      </function-arg-def>
      <function-arg-def name="fileFd" type="required">
        <function-arg-description>
          Name of output file descriptor
        </function-arg-description>
      </function-arg-def>
    </function-map-args>
    
    <sequence>
      <call function="'writeStartTagStep'">
      { 'tagName' : 'checkLogs',
        'fileFd'  : fileFd }
      </call>
      
      <call function="'grep'">
      {
        'location'      : location,
        'string2grep'   : 'ERROR',
        'expect2Find'   : FALSE,
        'caseSensitive' : FALSE,
        'file'          : '%s/logs/errors' % installDir,
        'fileFd'        : fileFd 
      }
      </call>
      
      <call function="'grep'">
      {
        'location'      : location,
        'string2grep'   : 'exception',
        'expect2Find'   : FALSE,
        'caseSensitive' : FALSE,
        'file'          : '%s/logs/errors' % installDir,
        'fileFd'        : fileFd 
      }
      </call>
      
      <call function="'writeEndTagStep'">{ 'fileFd' : fileFd}</call>
    </sequence>
  </function>

</stax>

